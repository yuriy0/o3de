#pragma once

#include <viewsrg.srgi>
#include <scenesrg.srgi>

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

#include <Atom/RPI/Math.azsli>
#include <Atom/RPI/TangentSpace.azsli>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>

// Include options first
#include <Atom/Features/PBR/LightingOptions.azsli>

// Then include custom surface and lighting data types
#include <Atom/Features/PBR/Lighting/LightingData.azsli>
#include <Atom/Features/PBR/Surfaces/EnhancedSurface.azsli>

#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Brdf.azsli>
#include <Atom/Features/PBR/Decals.azsli>

option enum class LightingModel
{
    Standard,
    Cloth
} o_lightingModel;

option bool o_cloth_enableSubsurface = false;


// See https://google.github.io/filament/Filament.md.html#mjx-eqn-clothSpecularBRDF
// Listing 19/Eqn 51
// Licensed under Apache 2.0, whose text can be found here: https://www.apache.org/licenses/LICENSE-2.0
// This is just the typical Lambertian but with the "cheap subsurface" term added
float3 ClothDiffuse(Surface surface, const float3 dirToCamera, const float3 dirToLight)
{
    float3 diffuse;
    if (o_cloth_enableSubsurface)
    {
        float NdotL_u = dot(surface.normal, dirToLight);
        float NdotL = saturate(NdotL_u);
        float w = MaterialSrg::m_cloth_subsurfaceWrap;
        float3 F = INV_PI
            * saturate((NdotL_u + w) / pow(1.0 + w, 2.0))
            * saturate(MaterialSrg::m_cloth_subsurface + NdotL);
        diffuse = surface.albedo * F;
    }
    else
    {
        float NdotL = saturate(dot(surface.normal, dirToLight));
        float F = INV_PI;
        diffuse = surface.albedo * F * NdotL;
    }

    if(o_clearCoat_feature_enabled)
    {
        // Attenuate diffuse term by clear coat's fresnel term to account for energy loss
        float HdotV = saturate(dot(normalize(dirToLight + dirToCamera), dirToCamera));
        diffuse *= 1.0 - (FresnelSchlick(HdotV, 0.04) * surface.clearCoat.factor);
    }

    return diffuse;
}

// Taken from StandardLighting.azsli
float3 GetDiffuseLighting_Standard(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight)
{
    float3 diffuse;
    if(o_enableSubsurfaceScattering)
    {
        // Use diffuse brdf contains double Fresnel (enter/exit surface) terms if subsurface scattering is enabled
        diffuse = NormalizedDisneyDiffuse(surface.albedo, surface.normal, lightingData.dirToCamera, dirToLight, surface.roughnessLinear);
    }
    else
    {
        diffuse = DiffuseLambertian(surface.albedo, surface.normal, dirToLight);
    }

    if(o_clearCoat_feature_enabled)
    {
        // Attenuate diffuse term by clear coat's fresnel term to account for energy loss
        float HdotV = saturate(dot(normalize(dirToLight + lightingData.dirToCamera), lightingData.dirToCamera));
        diffuse *= 1.0 - (FresnelSchlick(HdotV, 0.04) * surface.clearCoat.factor);
    }
    
    diffuse *= lightIntensity;
    return diffuse;
}

float3 GetDiffuseLighting(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight)
{
    switch (o_lightingModel)
    {
        case LightingModel::Standard:
            return GetDiffuseLighting_Standard(surface, lightingData, lightIntensity, dirToLight);

        case LightingModel::Cloth:
            return ClothDiffuse(surface, lightingData.dirToCamera, dirToLight) * lightIntensity;

        default:
            // Should be impossible
            return float3(0,0,0);
    }
}

// See https://google.github.io/filament/Filament.md.html#mjx-eqn-clothSpecularBRDF
// Listing 17
// Licensed under Apache 2.0, whose text can be found here: https://www.apache.org/licenses/LICENSE-2.0
float D_Ashikhmin(float roughness2, float NoH)
{
    // Ashikhmin 2007, "Distribution-based BRDFs"
	float a2 = roughness2;
	float cos2h = NoH * NoH;
	float sin2h = max(1.0 - cos2h, 0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16
	float sin4h = sin2h * sin2h;
	float cot2 = -cos2h / (a2 * sin2h);
	return 1.0 / (PI * (4.0 * a2 + 1.0) * sin4h) * (4.0 * exp(cot2) + sin4h);
}

float D_Charlie(float roughness, float NoH) {
    // Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"
    float invAlpha  = 1.0 / roughness;
    float cos2h = NoH * NoH;
    float sin2h = max(1.0 - cos2h, 0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16
    return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);
}

float G_Cloth(float NdotV, float NdotL)
{
    return 1.0 / (4.0 * NdotL + NdotV - NdotL * NdotV);
}

// Taken from StandardSurface.azsli
float ApplySpecularAA(float roughnessA2, float3 normal)
{
    // Constants for formula below
    const float screenVariance = 0.25f;
    const float varianceThresh = 0.18f;

    // Specular Anti-Aliasing
    float3 dndu = ddx_fine( normal );
    float3 dndv = ddy_fine( normal );
    float variance = screenVariance * (dot( dndu , dndu ) + dot( dndv , dndv ));
    float kernelRoughnessA2 = min(2.0 * variance , varianceThresh );
    float filteredRoughnessA2 = saturate ( roughnessA2 + kernelRoughnessA2 );
    return filteredRoughnessA2;
}

// Basically just SpecularGGX but replacing the D & F terms according to
// See https://google.github.io/filament/Filament.md.html#mjx-eqn-clothSpecularBRDF
float3 ClothSpecular(Surface surface, LightingData lightingData, const float3 dirToLight)
{
    const float3 dirToCamera = lightingData.dirToCamera;

    float3 c = 0;

    float3 halfVector = normalize(dirToLight + dirToCamera);
    float NdotH = saturate(dot(surface.normal, halfVector));
    float NdotV = lightingData.NdotV;
    float NdotL = saturate(dot(surface.normal, dirToLight));
    float HdotV = saturate(dot(halfVector, dirToCamera));

    // Sheen layer
    {
        float sheenRoughness = MaterialSrg::m_cloth_sheenRoughness;
        float sheenRoughnessA2 = sheenRoughness * sheenRoughness;

        if(o_applySpecularAA)
        {
            sheenRoughnessA2 = ApplySpecularAA(sheenRoughnessA2, surface.normal);
        }

        float D = D_Ashikhmin(sheenRoughnessA2, NdotH);
        // float D = D_Charlie(surface.roughnessA, NdotH);

        float G = GeometricShadowingMaskingGGXCorrelated(NdotV, NdotL, sheenRoughnessA2);
        // float G = G_Cloth(NdotV, NdotL);

        float3 F = MaterialSrg::m_cloth_sheenColor;
        // float3 F = FresnelSchlick(HdotV, surface.specularF0) * MaterialSrg::m_cloth_sheenColor;

        D = max(0.0, D);
        G = max(0.0, G);

        c += D * G * F * NdotL;
    }

    // "Base" layer, copied from SpecularGGX in Brdf.azsli
    {
        float3 specular;
    
        // Parameters for GGX
        float3 tangent = surface.anisotropy.tangent;
        float3 bitangent = surface.anisotropy.bitangent;
        float2 anisotropyFactors = surface.anisotropy.anisotropyFactors;
        float3 multiScatterCompensation = lightingData.multiScatterCompensation;
        float3 specularF0 = surface.specularF0;
        float roughnessA2 = surface.roughnessA2;
        
        if (o_enableAnisotropy)
        {
            // AnisotropicGGX
        
            // D, G and F from the lighting equation
            // Note: the division by (4.0 * NdotL * NdotV) is already factored out in the G function as an optimization
            float D = NormalDistibution_AnisotropicGGX( NdotH, halfVector, tangent, bitangent, anisotropyFactors );
            float G = ShadowingMasking_AnisotropicSmithGGXCorrelated(tangent, bitangent, dirToCamera, dirToLight, NdotV, NdotL, anisotropyFactors);
            float3 F = FresnelSchlick(HdotV, specularF0);

            D = max(0.0, D);
            G = max(0.0, G);

            // Multiply with multiscattering compensation in order to take account for several specular light bounces.
            specular = multiScatterCompensation * (D * G * F * NdotL);
        }
        else
        {
            // D, G and F from the lighting equation
            // Note: the division by (4.0 * NdotL * NdotV) is already factored out in the G function as an optimization
            float D = NormalDistributionGGX(NdotH, roughnessA2);
            float G = GeometricShadowingMaskingGGXCorrelated(NdotV, NdotL, roughnessA2);
            float3 F = FresnelSchlick(HdotV, specularF0);

            D = max(0.0, D);
            G = max(0.0, G);

            // Multiply with multiscattering compensation in order to take account for several specular light bounces.
            specular = multiScatterCompensation * (D * G * F * NdotL);
        }
    
        // Adjust by sheen overlay
        specular = specular * (1.0 - MaterialSrg::m_cloth_sheenColor);

        if(o_clearCoat_feature_enabled)
        {
            float NdotH = saturate(dot(surface.clearCoat.normal, halfVector));
            float NdotL = saturate(dot(surface.clearCoat.normal, dirToLight));
            float HdotL = saturate(dot(halfVector, dirToLight));

            // HdotV = HdotL due to the definition of half vector
            float3 clearCoatF = FresnelSchlick(HdotL, 0.04) * surface.clearCoat.factor;
            float clearCoatRoughness = max(surface.clearCoat.roughness * surface.clearCoat.roughness, 0.0005f);
            float3 clearCoatSpecular = ClearCoatGGX(NdotH, HdotL, NdotL, surface.clearCoat.normal, clearCoatRoughness, clearCoatF );

            specular = specular * (1.0 - clearCoatF) * (1.0 - clearCoatF) + clearCoatSpecular;
        }

        c += specular;
    }

    return c;
}

// Taken from StandardLighting.azsli
float3 GetSpecularLighting_Default(Surface surface, LightingData lightingData, const float3 lightIntensity, const float3 dirToLight)
{
    float3 specular;
    if (o_enableAnisotropy)
    {
        //AnisotropicGGX( float3 dirToCamera, float3 dirToLight, float3 normal, float3 tangent, float3 bitangent, float2 anisotropyFactors,
        //               float3 specularF0, float NdotV, float multiScatterCompensation )

        specular = AnisotropicGGX( lightingData.dirToCamera, dirToLight, surface.normal, surface.anisotropy.tangent, surface.anisotropy.bitangent, surface.anisotropy.anisotropyFactors,
                       surface.specularF0, lightingData.NdotV, lightingData.multiScatterCompensation );
    }
    else
    {
        specular = SpecularGGX(lightingData.dirToCamera, dirToLight, surface.normal, surface.specularF0, lightingData.NdotV, surface.roughnessA2, lightingData.multiScatterCompensation);
    }

    if(o_clearCoat_feature_enabled)
    {
        float3 halfVector = normalize(dirToLight + lightingData.dirToCamera);
        float NdotH = saturate(dot(surface.clearCoat.normal, halfVector));
        float NdotL = saturate(dot(surface.clearCoat.normal, dirToLight));
        float HdotL = saturate(dot(halfVector, dirToLight));

        // HdotV = HdotL due to the definition of half vector
        float3 clearCoatF = FresnelSchlick(HdotL, 0.04) * surface.clearCoat.factor;
        float clearCoatRoughness = max(surface.clearCoat.roughness * surface.clearCoat.roughness, 0.0005f);
        float3 clearCoatSpecular = ClearCoatGGX(NdotH, HdotL, NdotL, surface.clearCoat.normal, clearCoatRoughness, clearCoatF );

        specular = specular * (1.0 - clearCoatF) * (1.0 - clearCoatF) + clearCoatSpecular;
    }
    
    specular *= lightIntensity;
    
    return specular;
}

float3 GetSpecularLighting(Surface surface, LightingData lightingData, const float3 lightIntensity, const float3 dirToLight)
{
    switch (o_lightingModel)
    {
        case LightingModel::Standard:
            return GetSpecularLighting_Default(surface, lightingData, lightIntensity, dirToLight);

        case LightingModel::Cloth:
            return ClothSpecular(surface, lightingData, dirToLight) * lightIntensity;

        default:
            // Should be impossible
            return float3(0,0,0);
            break;
    }
}

struct PbrLightingOutput
{
    float4 m_diffuseColor;
    float4 m_specularColor;
    float4 m_albedo;
    float4 m_specularF0;
    float4 m_normal;
    float4 m_clearCoatNormal;
    float3 m_scatterDistance;
};


// Taken from StandardLighting.azsli
PbrLightingOutput GetPbrLightingOutput(Surface surface, LightingData lightingData, float alpha)
{
    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = float4(lightingData.diffuseLighting, alpha);
    lightingOutput.m_specularColor = float4(lightingData.specularLighting, alpha);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = float4(surface.specularF0, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    lightingOutput.m_normal.a = o_specularF0_enableMultiScatterCompensation ? 1.0f : 0.0f;
    
    // layout: (packedNormal.x, packedNormal.y, strength factor, clear coat roughness (not base material's roughness))
    lightingOutput.m_clearCoatNormal = float4(EncodeNormalSphereMap(surface.clearCoat.normal), o_clearCoat_feature_enabled ? surface.clearCoat.factor : 0.0, surface.clearCoat.roughness);

    return lightingOutput;
}
