/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <Atom/Features/PBR/AlphaUtils.azsli>

enum class OpacitySource {Packed, Split, None};
option OpacitySource o_opacity_source;

float SampleAlpha(Texture2D baseColorMap, Texture2D opacityMap, float2 baseColorUv, float2 opacityUv, sampler mapSampler, OpacitySource opacitySource)
{
    float alpha = 1.0;
    switch(opacitySource)
    {
        case OpacitySource::Packed:
        {
            alpha = baseColorMap.Sample(mapSampler, baseColorUv).a;
            break;
        }
        case OpacitySource::Split:  
        {
            alpha = opacityMap.Sample(mapSampler, opacityUv).r;
            break;
        }
        case OpacitySource::None:
        break;
    }
    return alpha;
}

float CalcMipLevel(float2 texture_coord)
{
    float2 dx = ddx(texture_coord);
    float2 dy = ddy(texture_coord);
    float delta_max_sqr = max(dot(dx, dx), dot(dy, dy));
    return max(0.0, 0.5 * log2(delta_max_sqr));
}

// To be used with Alpha To Coverage in alpha-test pipeline
// See https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f
float ModifyAlphaA2C(float alpha, float2 opacityUv, Texture2D opacityMapSrc, float opacityFactor, float MipScale)
{
    float2 opacityMapDim;
    opacityMapSrc.GetDimensions(opacityMapDim.x, opacityMapDim.y);
    alpha *= 1 + CalcMipLevel(opacityUv * opacityMapDim) * MipScale;

    // rescale alpha by partial derivative
    alpha = (alpha - opacityFactor) / max(fwidth(alpha), 0.0001) + 0.5;

    return alpha;
}

float GetAlphaInputAndClip(Texture2D baseColorMap, Texture2D opacityMap, float2 baseColorUv, float2 opacityUv, sampler mapSampler, float opacityFactor, OpacitySource opacitySource, float MipScale)
{
    float alpha = SampleAlpha(baseColorMap, opacityMap, baseColorUv, opacityUv, mapSampler, opacitySource);
    
    if (o_opacity_mode == OpacityMode::Cutout)
    {
        // rescale alpha by partial derivative
        // TODO: handle UV correctly if using packed alpha
        alpha = ModifyAlphaA2C(alpha, opacityUv, opacityMap, opacityFactor, MipScale);
    }
    else
    {
        alpha = alpha * opacityFactor;
    }
    
    return alpha;
}
