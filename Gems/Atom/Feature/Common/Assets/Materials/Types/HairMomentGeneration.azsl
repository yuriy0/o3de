#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

// TODO: move this to a reusable location
#include "Hair_Common.azsli"

COMMON_OPTIONS_BASE_COLOR()

struct VSInput
{
    float3 m_position : POSITION;

    // Extended fields (only referenced in this azsl file)...
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;
};

struct VSOutput
{
    float4 m_position : SV_Position;
    float2 m_uv[2] : UV0;
};

struct PSOutput
{
    float4 m_moments : SV_Target0;
    float m_opticalDepth : SV_Target1;
};

VSOutput MomentGeneration_VS(VSInput IN)
{
    VSOutput OUT;

    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float4 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0));
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    // TODO: we only ever need at most 1 of thse UVs
    OUT.m_uv[0] = mul(MaterialSrg::m_uvMatrix, float3(IN.m_uv0, 1.0)).xy;
    OUT.m_uv[1] = mul(MaterialSrg::m_uvMatrix, float3(IN.m_uv1, 1.0)).xy;

    return OUT;
}

float GetMatAlpha(VSOutput IN)
{
    float2 baseColorUV = IN.m_uv[MaterialSrg::m_baseColorMapUvIndex];
    float2 opacityUV = IN.m_uv[MaterialSrg::m_opacityMapUvIndex];
    static const float cutoutMipScale = 1; // NB: unused, as this pass only occurs in Blended, and this parameter is used only in Cutout
    float alpha = GetAlphaInputAndClip(MaterialSrg::m_baseColorMap, MaterialSrg::m_opacityMap, baseColorUV, opacityUV, MaterialSrg::m_sampler, MaterialSrg::m_opacityFactor, o_opacity_source, cutoutMipScale);

    return alpha;
}

PSOutput MomentGeneration_PS(VSOutput IN)
{
    PSOutput OUT;

    // Get alpha
    float alpha = GetMatAlpha(IN);

    // High values of alpha (i.e. low values of transmittance) lead to
    // artifacts, clamp below to avoid this
    float absorbance = -log(max(1.0 - alpha, 1e-5));
    OUT.m_opticalDepth = absorbance;

    // Compute moments
    float depth = 1.0 - IN.m_position.z; // NB: Atom uses 1 for near plane
    float depth_2 = depth*depth;
    float depth_3 = depth*depth_2;
    float depth_4 = depth*depth_3;
    OUT.m_moments = float4(depth, depth_2, depth_3, depth_4) * absorbance;

    return OUT;
}
