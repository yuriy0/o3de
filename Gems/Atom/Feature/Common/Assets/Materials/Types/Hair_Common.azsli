/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once 

#include <Atom/Features/SrgSemantics.azsli>
#include <viewsrg.srgi>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

#include "MaterialInputs/BaseColorInput.azsli"
#include "MaterialInputs/RoughnessInput.azsli"
#include "MaterialInputs/MetallicInput.azsli"
#include "MaterialInputs/SpecularInput.azsli"
#include "MaterialInputs/NormalInput.azsli"
#include "MaterialInputs/ClearCoatInput.azsli"
#include "MaterialInputs/OcclusionInput.azsli"
#include "MaterialInputs/EmissiveInput.azsli"
#include "MaterialInputs/UvSetCount.azsli"

#include "Hair_AlphaInput.azsli"

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // Auto-generate material SRG fields for common inputs
    COMMON_SRG_INPUTS_BASE_COLOR()
    COMMON_SRG_INPUTS_ROUGHNESS()
    COMMON_SRG_INPUTS_METALLIC()
    COMMON_SRG_INPUTS_SPECULAR_F0()
    COMMON_SRG_INPUTS_NORMAL()
    COMMON_SRG_INPUTS_CLEAR_COAT()
    COMMON_SRG_INPUTS_OCCLUSION()     
    COMMON_SRG_INPUTS_EMISSIVE()      

    float3x3 m_uvMatrix;                    // The combined transform for the uv coordinates having translation, 
    float4 m_pad1; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.
    float3x3 m_uvMatrixInverse;             //      rotation, scale and other modifiers represented by it.
    float4 m_pad2; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.

    float m_opacityFactor;
    float m_alphaClipThreshold;
    float m_depthClipDistance;
    Texture2D m_opacityMap;
    uint m_opacityMapUvIndex;

    // Hair Params

    // The tilt of the hair cuticles in radians (value should be between 5 and 10 degrees)
    float m_cuticleTilt;

    // Hair Params

    float m_debugFloat01;
    float m_debugFloat02;
    float m_debugFloat03;
    float m_debugFloat04;
    float m_debugFloat05;

    bool m_debugBool01;
    bool m_debugBool02;
    bool m_debugBool03;
    bool m_debugBool04;
    bool m_debugBool05;

    bool m_applyR;
    bool m_applyTT;
    bool m_applyTRT;
    bool m_applyMultiScattering;
    bool m_applyIblHair;

    Sampler m_sampler
    {
       AddressU = Wrap;
       AddressV = Wrap;
       MinFilter = Linear;
       MagFilter = Linear;
       MipFilter = Linear;
       MaxAnisotropy = 16;
    };

    Texture2D m_brdfMap;

    Sampler m_samplerBrdf
    {
        AddressU = Clamp;
        AddressV = Clamp;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };

    ///////////////////////////////////////////////////////
    // Apc parameters begin
    ///////////////////////////////////////////////////////

    // Parameters for cutout opacity mode
    float m_cutoutMipBias;
    
    // Parameters for Order-independant transparency
    float3 m_transmittanceTintForTransparent;
    float m_oitClip;
    Texture2D<float4> m_oitMoments;
    Texture2D<float> m_oitOpticalDepth;
}
