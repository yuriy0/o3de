#pragma once

#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/Features/PBR/Decals.azsli>
#include <Atom/Features/PBR/Lights/Lights.azsli>
#include <Atom/Features/PBR/Lights/Ibl.azsli>

PbrLightingOutput ForwardPassPS_Common(VSOutput IN, bool isFrontFace, out float depth, out float3 wsNormal_out)
{
    // HACK for hair normals
    isFrontFace = true;

    Surface surface;
    surface.position = IN.m_worldPosition;

    // ------- Tangents & Bitangets -------

    float3 tangents[UvSetCount] = { IN.m_tangent.xyz, IN.m_tangent.xyz };
    float3 bitangents[UvSetCount] = { IN.m_bitangent.xyz, IN.m_bitangent.xyz };

    if (o_normal_useTexture)
    {
        PrepareGeneratedTangent(IN.m_normal, IN.m_worldPosition, isFrontFace, IN.m_uv, UvSetCount, tangents, bitangents);
    }

    // {
    //     float3 dirToCamera = normalize(ViewSrg::m_worldPosition.xyz - surface.position);
    //     float3 tangent = tangents[0];
    // 
    //     // Handle case where tangent is aligned with camera
    //     if(all(tangent == dirToCamera) || all(tangent == -dirToCamera))
    //     {
    //         tangent -= IN.m_normal * 0.001f;
    //     }
    // 
    //     float3 bitangent = cross(dirToCamera, tangent);
    //     IN.m_normal = normalize( cross(tangent, bitangent) );
    // }

    // ------- Alpha & Depth & Clip -------

    float2 baseColorUv = IN.m_uv[MaterialSrg::m_baseColorMapUvIndex];
    float2 opacityUv = IN.m_uv[MaterialSrg::m_opacityMapUvIndex];

    float alpha = SampleAlpha(MaterialSrg::m_baseColorMap, MaterialSrg::m_opacityMap, baseColorUv, opacityUv, MaterialSrg::m_sampler, o_opacity_source) * MaterialSrg::m_opacityFactor;

    uint2 screenSpacePixel = uint2(IN.m_position.xy);

    depth = IN.m_position.z;

    const float linearDepthSample = PassSrg::m_linearDepthTexture.Load(uint3(screenSpacePixel.x, screenSpacePixel.y, 0)).x;
    const float linearDepth = abs( ViewSrg::GetFarZTimesNearZ() / (ViewSrg::GetFarZMinusNearZ() * depth - ViewSrg::GetFarZ()) ); 
    const float linearDepthDiff = abs(linearDepthSample - linearDepth);

#ifndef TRANSPARENT_PASS

    clip(alpha - MaterialSrg::m_alphaClipThreshold);
    clip(linearDepthDiff - MaterialSrg::m_depthClipDistance);

#endif
    
    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
        if (alpha <= MaterialSrg::m_oitClip)
        {
            clip(-1);
        }
    }
    
    // ------- Normal -------

    float2 normalUv = IN.m_uv[MaterialSrg::m_normalMapUvIndex];
    float3x3 uvMatrix = MaterialSrg::m_normalMapUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3(); // By design, only UV0 is allowed to apply transforms.

    surface.normal = GetNormalInputWS(MaterialSrg::m_normalMap, MaterialSrg::m_sampler, normalUv, MaterialSrg::m_flipNormalX, MaterialSrg::m_flipNormalY, isFrontFace, IN.m_normal,
                                       tangents[MaterialSrg::m_normalMapUvIndex], bitangents[MaterialSrg::m_normalMapUvIndex], uvMatrix, o_normal_useTexture, MaterialSrg::m_normalFactor);

    wsNormal_out = surface.normal;

    // ------- Base Color -------

    float3 sampledColor = GetBaseColorInput(MaterialSrg::m_baseColorMap, MaterialSrg::m_sampler, baseColorUv, MaterialSrg::m_baseColor.rgb, o_baseColor_useTexture);
    float3 baseColor = BlendBaseColor(sampledColor, MaterialSrg::m_baseColor.rgb, MaterialSrg::m_baseColorFactor, o_baseColorTextureBlendMode, o_baseColor_useTexture);

    // ------- Specular -------

    float2 specularUv = IN.m_uv[MaterialSrg::m_specularF0MapUvIndex];
    float specularF0Factor = GetSpecularInput(MaterialSrg::m_specularF0Map, MaterialSrg::m_sampler, specularUv, MaterialSrg::m_specularF0Factor, o_specularF0_useTexture);

    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor);

    // ------- Roughness -------

    float2 roughnessUv = IN.m_uv[MaterialSrg::m_roughnessMapUvIndex];
    surface.roughnessLinear = GetRoughnessInput(MaterialSrg::m_roughnessMap, MaterialSrg::m_sampler, roughnessUv, MaterialSrg::m_roughnessFactor,
                                        MaterialSrg::m_roughnessLowerBound, MaterialSrg::m_roughnessUpperBound, o_roughness_useTexture);
    surface.CalculateRoughnessA();

    // ------- Hair -------
    
    float3 bitangent = cross(surface.normal, tangents[0]);
    float3 tangent = cross(bitangent, surface.normal);
    surface.tangent = normalize(tangent);
    surface.cuticleTilt = MaterialSrg::m_cuticleTilt;

    // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
    
    // Directional light shadow coordinates
    lightingData.shadowCoords = IN.m_shadowCoords;

    // ------- Occlusion -------
    
    lightingData.diffuseAmbientOcclusion = GetOcclusionInput(MaterialSrg::m_diffuseOcclusionMap, MaterialSrg::m_sampler, IN.m_uv[MaterialSrg::m_diffuseOcclusionMapUvIndex], MaterialSrg::m_diffuseOcclusionFactor, o_diffuseOcclusion_useTexture);
    lightingData.specularOcclusion = GetOcclusionInput(MaterialSrg::m_specularOcclusionMap, MaterialSrg::m_sampler, IN.m_uv[MaterialSrg::m_specularOcclusionMapUvIndex], MaterialSrg::m_specularOcclusionFactor, o_specularOcclusion_useTexture);

    // ------- Diffuse and Specular -------
    
    surface.clearCoat.factor = 0.0f;
    surface.clearCoat.roughness = 0.0f;
    surface.clearCoat.normal = float3(0.0f, 0.0f, 0.0f);

    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    // ------- Multiscatter -------

    lightingData.CalculateMultiscatterCompensation(surface.specularF0, o_specularF0_enableMultiScatterCompensation);

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData);

    // Apply Image Based Lighting (IBL)
    if(o_hair_lighting_model == HairLightingModel::GGX)
    {
        ApplyIBL(surface, lightingData);
    }
    else if(o_hair_lighting_model == HairLightingModel::Marschner)
    {
        ApplyIblHair(surface, lightingData);
    }

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Opacity -------

    // Note: lightingOutput rendertargets are not always used as named, particularly m_diffuseColor (target 0) and
    // m_specularColor (target 1). Comments below describe the differences when appropriate.

    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
		// Handled further down in transparent pass
    }
    else
    {
        // Disable Subsurface scattering
        lightingOutput.m_diffuseColor.w = -1.0;
    }

    return lightingOutput;
}
