#include <Atom/RPI/Math.azsli>

#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
/* #include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli> */
#include <Atom/Features/ScreenSpace/ScreenSpaceUtil.azsli>

#include <scenesrg.srgi>

#include "DeferredFog_Srg.azsli"

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    Texture3D<float4> m_fogCDF;
    Texture2D<float2> m_depthStencilTexture;

    float3 m_fogColor;
    DEFERRED_FOG_PASS_SRG_COMMON

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler DepthSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
};

struct PSOutput
{
    float4 m_color : SV_Target0;
    float4 m_debug : SV_Target1;
};


// From CryRender
float GetJitter(float2 n)
{
    float3 magic = {0.06711056f, 0.00583715f, 52.9829189f};
    float jitter = frac(magic.z * frac(dot(n.xy, magic.xy)));
    return jitter;
};

// From McGuire, "The Graphics Codex"
float hash2d(float2 p) {
    return frac(1.0e4 * sin(17.0*p.x + 0.1*p.y) * (0.1 + abs(sin(13.0*p.y + p.x))));
};

#include "DeferredFog_Common.azsli"

float LinearizeDepth(float zDepth)
{
    return abs(((ViewSrg::GetFarZTimesNearZ()) / (ViewSrg::GetFarZMinusNearZ() * zDepth - ViewSrg::GetFarZ())));
}

PSOutput MainPS(VSOutput IN)
{
    // Sample depth and convert to a Z coordinate into the fog texture
    const float zDepth = PassSrg::m_depthStencilTexture.Sample(PassSrg::DepthSampler, IN.m_texCoord).r;
    const float depth = LinearizeDepth(zDepth);
    const float fogTexZCoord = LinearDepthToFogVolumeTexZ(depth);

    // Apply jitter to sample location
    /* float2 dim; */
    /* PassSrg::m_depthStencilTexture.GetDimensions(dim.x, dim.y); */

    float3 dimFogCDF;
    PassSrg::m_fogCDF.GetDimensions(dimFogCDF.x, dimFogCDF.y, dimFogCDF.z);

    // GetJitter gives a "random" value [0,1]
    // Remap [0,1] -> [-JitterScale,0] -> [-JitterScale+JitterOffset,JitterOffset]
    // -> [-JitterScale+JitterOffset*v,JitterOffset*v] where `v' is the size of a fog voxel in Z dimension
    static const float JitterScale = -0.15f;
    static const float JitterOffset = 0.025f;
    float jitter = 0;
    jitter = hash2d(IN.m_texCoord.xy);
    /* jitter = GetJitter(IN.m_texCoord.xy / dim); */
    jitter = (jitter * JitterScale + JitterOffset) * (1.0 / (dimFogCDF.z - 1.0));
    float3 sampleUvw = float3(IN.m_texCoord, fogTexZCoord + jitter);

    // Sample fog CDF
    const float4 col = PassSrg::m_fogCDF.Sample(PassSrg::LinearSampler, sampleUvw);

    PSOutput OUT;
    OUT.m_color = col;

    return OUT;
};
