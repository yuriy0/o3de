#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/RPI/Math.azsli>

#include <viewsrg.srgi>
#include <scenesrg.srgi>

#include "DeferredFog_Srg.azsli"
#include "DeferredFog_LightsCommon.azsli"

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    DEFERRED_FOG_PASS_SRG_COMMON

    // Input/Output
    Texture3D<float4> m_input;
    RWTexture3D<float4> m_output;
}

#include "DeferredFog_Common.azsli"

#define NUM_THREAD 8

static const uint NumThreadsPerGroupAxis = NUM_THREAD;
static const uint NumThreadsPerGroup = NumThreadsPerGroupAxis*NumThreadsPerGroupAxis;

static const uint KernelRadius = 4;
static const uint KernelSize = 2*KernelRadius+1;

/* // Each row in each group reads NumThreadsPerGroupAxis values, */
/* // plus another KernelSize-1 values for the pixels near the edge */
/* // Each group has `NumThreadsPerGroupAxis' rows */
/* static const uint NumInputsPerRow = NumThreadsPerGroupAxis+KernelSize-1; */
/* static const uint NumInputsPerGroup = NumThreadsPerGroupAxis*NumInputsPerRow; */

/* // Number of pixels inputs which each thread must read into group shared memory */
/* // Quite simply, the total number of pixels to be read per group, divided by the number of threads per group */
/* // Must be a integer, or things go crazy (nb: static assert?) */
/* static const uint NumInputPixelsToReadPerThread = */
/*     //   NumInputsPerGroup / NumThreadsPerGroup // By definition */
/*     // = (NumThreadsPerGroupAxis*NumInputsPerRow) / (NumThreadsPerGroupAxis*NumThreadsPerGroupAxis) */
/*     // = NumInputsPerRow / NumThreadsPerGroupAxis */
/*     // = NumThreadsPerGroupAxis + KernelSize - 1 / NumThreadsPerGroupAxis */
/*     // = (NumThreadsPerGroupAxis / NumThreadsPerGroupAxis) + (KernelSize - 1 / NumThreadsPerGroupAxis) */
/*     // = 1 + ((KernelSize - 1) / NumThreadsPerGroupAxis) */
/*     // = 1 + (((2*KernelRadius+1) - 1) / NumThreadsPerGroupAxis) */
/*     // = 1 + (2*KernelRadius / NumThreadsPerGroupAxis) */
/*     NumInputsPerGroup / NumThreadsPerGroup */
/* ; */

// Sigma=2
/* static const float GaussianBlurKernel[KernelSize] = { */
/*      0.02853226260337099 */
/*     ,0.06723453549491201 */
/*     ,0.1240093299792275 */
/*     ,0.1790438646174162 */
/*     ,0.2023600146101466 */
/*     ,0.1790438646174162 */
/*     ,0.1240093299792275 */
/*     ,0.06723453549491201 */
/*     ,0.02853226260337099 */
/* }; */

static const uint NumInputsAxis = NumThreadsPerGroupAxis + 2 * KernelRadius;
static const uint NumInputPixelsToReadPerThread = NumInputsAxis / NumThreadsPerGroupAxis;

// Shared inputs
groupshared float4 Input[NumInputsAxis][NumInputsAxis];

int3 ClampDimXY(int3 p, int2 dim)
{
    return int3(clamp(p.xy, int2(0,0), dim - 1), p.z);
}

float GaussianFactor(float sigma) { return 2 * sigma * sigma; }

float Kernel(int2 p, float centralLuminance, float3 sampleColor)
{
    static const float SigmaDistance = 2.0;
    static const float SigmaLuminance = 2.0;

    // Distance factor
    const float2 pf = float2(p);
    const float dist = dot(pf, pf) / GaussianFactor(SigmaDistance);

    // Luminance factor
    const float lum = abs(centralLuminance - GetLuminance(sampleColor)) / GaussianFactor(SigmaLuminance);

    // Overall kernel weight is based on products of distance and luminance based weights
    // exp(-dist) * exp(-lum) == exp(-dist + -lum)
    const float factor = dist+lum;

    return exp(-factor);
}

// Generic, i.e. horizontal or vertical
void Blur(const uint3 dispatch_id, const uint3 groupthread_id, const uint3 group_id)
{
    //// Setup...
    // Dimensions of volume tex to be processed
    uint3 dim;
    PassSrg::m_input.GetDimensions(dim.x, dim.y, dim.z);

    // The index of the slice to process (one warp per z slice)
    const int zSliceIndex = dispatch_id.z;

    // Upper left corner of the pixels to be processed (i.e. written to) by this group
    const int3 groupOrigin = int3(group_id.xy * NumThreadsPerGroupAxis, zSliceIndex);

    // Index of the thread in the group
    const int2 threadIxGroup = groupthread_id.xy;

    static const int2 OffsetScale = int2(NumInputPixelsToReadPerThread, NumInputPixelsToReadPerThread);
    static const int2 SourceIndexOffset = int2(KernelRadius,KernelRadius);

    //// read input values into shared memory
    {
        for (int i = 0; i < NumInputPixelsToReadPerThread; ++i)
        {
            for (int j = 0; j < NumInputPixelsToReadPerThread; ++j)
            {
                // The position relative to groups origin of the pixel to read
                const int2 offsetFromGroupOrigin =
                    threadIxGroup * OffsetScale + int2(i, j);

                // The input texture position from which to read data into this input slot
                const int3 inputPos = ClampDimXY(
                    groupOrigin + int3(offsetFromGroupOrigin - SourceIndexOffset, 0),
                    dim.xy
                );

                Input[offsetFromGroupOrigin.x][offsetFromGroupOrigin.y] = PassSrg::m_input.Load(int4(inputPos,0));
            }
        }
    }


    // Wait for all inputs to be read
    GroupMemoryBarrierWithGroupSync();

    //// Do blur
    float4 accum = 0;
    float totalWeight = 0;

    // Central value for luminance weight
    const int2 centralInputIndex = threadIxGroup + SourceIndexOffset;
    const float centralInputLuminance = GetLuminance(Input[centralInputIndex.x][centralInputIndex.y].xyz);

    {
        // [unroll]
        for (int i = 0; i < KernelSize; ++i)
        {
            // [unroll]
            for (int j = 0; j < KernelSize; ++j)
            {
                const int2 kernelPos = int2(i, j);

                // Sample value for this index (i,j)
                const int2 offsetFromGroupOrigin = threadIxGroup + kernelPos;
                const float4 value = Input[offsetFromGroupOrigin.x][offsetFromGroupOrigin.y];

                // Weight for this sample
                const float weight = Kernel(kernelPos - SourceIndexOffset, centralInputLuminance, value.rgb);

                accum += weight * value;
                totalWeight += weight;
            }
        }
    }

    PassSrg::m_output[dispatch_id] = accum / totalWeight;
}

[numthreads(NUM_THREAD,NUM_THREAD,1)]
void MainCS(uint3 dispatch_id: SV_DispatchThreadID, uint3 groupthread_id : SV_GroupThreadID, uint3 group_id : SV_GroupID)
{
    if (false)// DEBUG: no blur
    {
        PassSrg::m_output[dispatch_id] = PassSrg::m_input[dispatch_id];
        return;
    }
    // END DEBUG

    Blur(dispatch_id, groupthread_id, group_id);
}
