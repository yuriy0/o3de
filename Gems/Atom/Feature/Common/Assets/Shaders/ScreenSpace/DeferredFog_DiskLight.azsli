#pragma once


#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>
#include <Atom/Features/Shadow/ProjectedShadow.azsli>
// #include "DeferredFog_ProjectedShadow.azsli"

enum DiskLightFlag
{
    UseConeAngle = 1,
};

void ApplyDiskLight(ViewSrg::DiskLight light, Surface surface, inout LightingData lightingData)
{
    float3 posToLight = light.m_position - surface.position;
    float distanceToLight2 = dot(posToLight, posToLight); // light distance squared
    float falloff = distanceToLight2 * light.m_invAttenuationRadiusSquared;

    float3 posToLightDir = normalize(posToLight);

    // Reduce the brightness based on how much the disk is facing this pixel.
    float angleFalloff = dot(posToLightDir, -light.m_direction);

    // Only calculate shading if light is in range
    if (falloff < 1.0f && angleFalloff > 0.0f)
    {
        bool useConeAngle = light.m_flags & DiskLightFlag::UseConeAngle;
        float3 dirToConeTip;
        float dotWithDirection;

        if (useConeAngle)
        {
            float3 coneTipPosition = light.m_position + light.m_bulbPositionOffset * -light.m_direction;
            dirToConeTip = normalize(coneTipPosition - surface.position);
            dotWithDirection = dot(dirToConeTip, -normalize(light.m_direction));

            // If outside the outer cone angle return.
            if (dotWithDirection < light.m_cosOuterConeAngle)
            {
                return;
            }
        }

        // Smoothly adjusts the light intensity so it reaches 0 at light.m_attenuationRadius distance
        float radiusAttenuation = 1.0 - (falloff * falloff);
        radiusAttenuation = radiusAttenuation * radiusAttenuation;
        
        // Find the distance to the closest point on the disk
        float distanceToPlane = dot(posToLight, -light.m_direction);
        float distanceToPlane2 = distanceToPlane * distanceToPlane;
        float pointOnPlaneToLightDistance = sqrt(distanceToLight2 - distanceToPlane2); // pythagorean theorem 
        float pointOnPlaneToDiskDistance = max(pointOnPlaneToLightDistance - light.m_diskRadius, 0.0f); 
        float distanceToDisk2 = pointOnPlaneToDiskDistance * pointOnPlaneToDiskDistance + distanceToPlane2;

        // Update the light direction based on the edges of the disk as visible from this point instead of the center.
        float3 pointOnPlane = -light.m_direction * distanceToPlane;
        float3 pointOnPlaneToLightDir = normalize(posToLight - pointOnPlane);
        float3 nearSideDir = normalize(pointOnPlane + pointOnPlaneToLightDir * (pointOnPlaneToLightDistance - light.m_diskRadius));
        float3 farSideDir = normalize(pointOnPlane + pointOnPlaneToLightDir * (pointOnPlaneToLightDistance + light.m_diskRadius));
        posToLightDir = normalize((nearSideDir + farSideDir) * 0.5);

        // Standard quadratic falloff
        static const float MinDistanceToLight = 0.25;
        distanceToDisk2 = max(MinDistanceToLight*MinDistanceToLight, distanceToDisk2); // clamp the light to at least 1mm away to avoid extreme values.
        float3 lightIntensity = (light.m_rgbIntensityCandelas / distanceToDisk2) * radiusAttenuation * angleFalloff;

        // Adjust brightness based on the disk size relative to its distance.
        // The larger the disk is relative to the surface point, the dimmer it becomes.
        // 0 radius disks are unaffected.
        lightIntensity /= ((light.m_diskRadius / distanceToPlane) + 1.0);

        // shadow
        float litRatio = 1.0;
        
        // How much is back face shadowed, it's set to the reverse of litRatio to share the same default value with thickness, which should be 0 if no shadow map available
        float backShadowRatio = 0.0;
        // if (o_enableShadows)
        {
            litRatio = ProjectedShadow::GetVisibility(
                light.m_shadowIndex,
                light.m_position,
                surface.position,
                -dirToConeTip,
                surface.normal);
             
            // Use backShadowRatio to carry thickness from shadow map for thick mode
            // backShadowRatio = 1.0 - litRatio;
            // if (o_transmission_mode == TransmissionMode::ThickObject)
            // {
            //     backShadowRatio = ProjectedShadow::GetThickness(
            //         light.m_shadowIndex,
            //         surface.position);
            // }
        }

        if (useConeAngle && dotWithDirection < light.m_cosInnerConeAngle) // in penumbra
        {   
            // Normalize into 0.0 - 1.0 space.
            float penumbraMask = (dotWithDirection - light.m_cosOuterConeAngle) / (light.m_cosInnerConeAngle - light.m_cosOuterConeAngle);
            
            // Apply smoothstep
            penumbraMask = penumbraMask * penumbraMask * (3.0 - 2.0 * penumbraMask);
            
            lightIntensity *= penumbraMask;
        }

        // Diffuse contribution
        lightingData.diffuseLighting += GetDiffuseLighting(surface, lightingData, lightIntensity, posToLightDir) * litRatio;
    }
}
